package easyday.day07;

import java.util.Arrays;

//136. 只出现一次的数字
public class SingleNumber_136 {
    public int singleNumber(int[] nums) {
        int len = nums.length;
        Arrays.sort(nums);
        for (int i=0;i<len;i+=2){
            if (i==len-1){
                return nums[i];
            }
            if (nums[i]==nums[i+1]){
                continue;
            }else {
                return nums[i];
            }
        }
        return 0;
    }
    
    
    
        public int singleNumber(int[] nums) {
        //自己的思路是，先排序，然后逐个对比，找到单一的值
        //用到空间的方法：1、哈希表存储，记录数字的数值和该数字出现的次数，最后找到次数1的数字
                        //2、集合记录出现的所有数字（不论次数），求出所有出现过的数字的总和的两倍，最后减去初始集合的总和，差值就是只出现一次是数字
        //题解：位运算，思路太强了真的
        //任何数和 00 做异或运算，结果仍然是原来的数，即 a ⊕ 0=a。
//        任何数和其自身做异或运算，结果是 0，即 a⊕a=0。
//        异或运算满足交换律和结合律，即 a⊕b⊕a=b⊕a⊕a=b⊕(a⊕a)=b⊕0=b。
//
        int single = 0;
        for (int num : nums) {
            single ^= num;
        }
        return single;

    }
}
