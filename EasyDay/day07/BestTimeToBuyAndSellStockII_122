package easyday.day07;
//122. 买卖股票的最佳时机 II
public class BestTimeToBuyAndSellStockII_122 {
    public int maxProfit(int[] prices) {
        return buyAndSell(prices);
    }
    //动态规划
    //1、最多只能持有一支股票
    //2、也可以在同一天先卖掉手里的股票，立刻再买
    //dp[i][0]表示第i天手里不持有股票的最大收益
    //dp[i][1]表示第i天手里持有一支股票的最大收益
    //dp[i][0]=max(dp[i-1][0],dp[i-1][1]+prices[i]),不持有的最大收益要么就是昨天也没持有，要么就是在昨天持有的基础上，把昨天持有的卖了
    //dp[i][1]=max(dp[i-1][1],dp[i-1][0]-prices[i]),持有的最大收益要么就是昨天也持有，要么就是在今天没有持有的基础上，把今天的买了持有
    public int buyAndSell(int[] prices){
        int len = prices.length;
        int[][] dp = new int[len][2];
        dp[0][0]=0;
        dp[0][1]=0-prices[0];
        for (int i=1;i<len;i++){
            dp[i][0]=Math.max(dp[i-1][0],dp[i-1][1]+prices[i]);
            dp[i][1]=Math.max(dp[i-1][1],dp[i-1][0]-prices[i]);
        }
        return dp[len-1][0];
    }

    //贪心算法
    //只考虑每次赚钱的机会，强行贪心
    public int greedyAlgorithm(int[] prices){
        int len = prices.length;
        int res=0;
        for (int i=1;i<len;i++){
            if (prices[i]-prices[i-1]>0){
                res+=prices[i]-prices[i-1];
            }
        }
        return res;
    }
}
