package day11;

/**
 * Created by liangyi on 2022/7/5.
 */
//198. 打家劫舍
public class HouseRobber_198 {
    public int rob(int[] nums) {
        //动态规划
        //首先当偷第k户人家的时候，那就不能偷k-1户的，那就是第k户的金额加上前k-2户金额总和的最大
        //当不偷第k户的时候，那就是前k-1户金额总和的最大
        //写状态转移方程
        // dp[i]=nums[i]+dp[i-2] & dp[i]=dp[i-1]
        //dp[0]=nums[0],dp[1]=max(dp[0],nums[1])
        //最后考虑一下返回值，返回len-1就对了
        int len = nums.length;
        if (nums==null||len==0){
            return 0;
        }
        if (len==1){
            return nums[0];
        }
        int[] dp=new int[len];
        dp[0]=nums[0];
        dp[1]=Math.max(nums[0],nums[1]);
        for (int i = 2; i < len; i++) {
            dp[i]=Math.max(nums[i]+dp[i-2],dp[i-1]);
        }
        return dp[len-1];
    }
}
