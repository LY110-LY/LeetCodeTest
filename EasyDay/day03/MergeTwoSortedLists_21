package easyday.day03;
//21. 合并两个有序链表
public class MergeTwoSortedLists_21 {

//      Definition for singly-linked list.
      public class ListNode {
          int val;
          ListNode next;
          ListNode() {}
          ListNode(int val) { this.val = val; }
          ListNode(int val, ListNode next) { this.val = val; this.next = next; }
      }
//    //方法1：迭代方法
//    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
//        if (list1==null){
//            return list2;
//        }
//        if (list2==null){
//            return list1;
//        }
//        ListNode prehead = new ListNode(0);
//        ListNode prev = prehead;
//        while (list1!=null&&list2!=null){
//
//            if (list1.val<= list2.val){
//                prev.next=list1;
//                list1=list1.next;
//                prev=prev.next;
//            }else {
//                prev.next=list2;
//                list2=list2.next;
//                prev=prev.next;
//            }
//        }
//        //此时已经有一个链表为空，判断prev.next=list1是否为空，是则证明list1已空，返回list2；否则返回list1
//        prev.next=list1==null?list2:list1;
//        return prehead.next;
//    }

    //方法2：递归
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        if (list1==null){
            return list2;
        }
        if (list2==null){
            return list1;
        }
        ListNode pre = new ListNode(0);
        if (list1.val<= list2.val){
            list1.next=mergeTwoLists(list1.next,list2);
            return list1;
        }else {
            list2.next=mergeTwoLists(list1,list2.next);
            return list2;
        }
    }
}
